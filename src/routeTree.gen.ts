/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginIndexImport } from './routes/Login/index'
import { Route as HomeIndexImport } from './routes/Home/index'
import { Route as DetailsPostIdImport } from './routes/Details/$postId'

// Create/Update Routes

const LoginIndexRoute = LoginIndexImport.update({
  id: '/Login/',
  path: '/Login/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/Home/',
  path: '/Home/',
  getParentRoute: () => rootRoute,
} as any)

const DetailsPostIdRoute = DetailsPostIdImport.update({
  id: '/Details/$postId',
  path: '/Details/$postId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Details/$postId': {
      id: '/Details/$postId'
      path: '/Details/$postId'
      fullPath: '/Details/$postId'
      preLoaderRoute: typeof DetailsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/Home/': {
      id: '/Home/'
      path: '/Home'
      fullPath: '/Home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/Login/': {
      id: '/Login/'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/Details/$postId': typeof DetailsPostIdRoute
  '/Home': typeof HomeIndexRoute
  '/Login': typeof LoginIndexRoute
}

export interface FileRoutesByTo {
  '/Details/$postId': typeof DetailsPostIdRoute
  '/Home': typeof HomeIndexRoute
  '/Login': typeof LoginIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/Details/$postId': typeof DetailsPostIdRoute
  '/Home/': typeof HomeIndexRoute
  '/Login/': typeof LoginIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/Details/$postId' | '/Home' | '/Login'
  fileRoutesByTo: FileRoutesByTo
  to: '/Details/$postId' | '/Home' | '/Login'
  id: '__root__' | '/Details/$postId' | '/Home/' | '/Login/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DetailsPostIdRoute: typeof DetailsPostIdRoute
  HomeIndexRoute: typeof HomeIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  DetailsPostIdRoute: DetailsPostIdRoute,
  HomeIndexRoute: HomeIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/Details/$postId",
        "/Home/",
        "/Login/"
      ]
    },
    "/Details/$postId": {
      "filePath": "Details/$postId.tsx"
    },
    "/Home/": {
      "filePath": "Home/index.tsx"
    },
    "/Login/": {
      "filePath": "Login/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
